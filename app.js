// Ki·ªÉm tra n·∫øu tr√¨nh duy·ªát h·ªó tr·ª£ MetaMask
if (typeof window.ethereum === "undefined") {
    alert("Vui l√≤ng c√†i ƒë·∫∑t MetaMask ƒë·ªÉ s·ª≠ d·ª•ng VinSwap!");
}

// üìå Bi·∫øn to√†n c·ª•c
let provider, signer, userAccount;
let vinTokenAddress = "0x941F63807401efCE8afe3C9d88d368bAA287Fac4"; // ƒê·ªãa ch·ªâ token VIN
let vinSwapAddress = "0xFFE8C8E49f065b083ce3F45014b443Cb6c5F6e38"; // ƒê·ªãa ch·ªâ h·ª£p ƒë·ªìng Swap
let rpcUrl = "https://rpc.viction.xyz"; // RPC m·∫°ng Viction

let fromToken = "VIC";
let toToken = "VIN";
const balances = { VIC: 0, VIN: 0 }; // L∆∞u s·ªë d∆∞ VIC/VIN ch√≠nh x√°c

// üìå K·∫øt n·ªëi v√≠ MetaMask
async function connectWallet() {
    try {
        if (!window.ethereum) {
            alert("Vui l√≤ng c√†i ƒë·∫∑t MetaMask!");
            return;
        }

        provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send("eth_requestAccounts", []);
        signer = provider.getSigner();
        userAccount = await signer.getAddress();

        console.log("‚úÖ ƒê√£ k·∫øt n·ªëi v√≠:", userAccount);
        document.getElementById("wallet-address").innerText = userAccount;

        // ·∫®n c√°c giao di·ªán kh√¥ng c·∫ßn thi·∫øt
        document.querySelector(".main-content").style.display = "none";
        document.querySelector(".navbar").style.display = "none";
        document.querySelector(".footer").style.display = "none";

        // Hi·ªÉn th·ªã giao di·ªán Swap
        document.getElementById("swap-interface").style.display = "block";

        // G·ªçi h√†m hi·ªÉn th·ªã s·ªë d∆∞ sau khi k·∫øt n·ªëi
        await getBalances();
    } catch (error) {
        console.error("‚ùå L·ªói k·∫øt n·ªëi v√≠:", error);
        alert("K·∫øt n·ªëi v√≠ th·∫•t b·∫°i!");
    }
}

// üìå L·∫•y s·ªë d∆∞ VIC & VIN
async function getBalances() {
    try {
        if (!userAccount) {
            console.error("V√≠ ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi!");
            return;
        }

        console.log("üîç Ki·ªÉm tra s·ªë d∆∞ c·ªßa v√≠:", userAccount);

        // üè¶ L·∫•y s·ªë d∆∞ VIC (Native Coin - Viction)
        const vicProvider = new ethers.providers.JsonRpcProvider(rpcUrl);
        const vicBalanceRaw = await vicProvider.getBalance(userAccount);
        balances.VIC = ethers.utils.formatEther(vicBalanceRaw); // L∆∞u s·ªë d∆∞ VIC

        // üè¶ L·∫•y s·ªë d∆∞ VIN (Token ERC-20)
        const vinABI = [
            {
                "constant": true,
                "inputs": [{ "name": "owner", "type": "address" }],
                "name": "balanceOf",
                "outputs": [{ "name": "balance", "type": "uint256" }],
                "stateMutability": "view",
                "type": "function"
            }
        ];

        const vinTokenContract = new ethers.Contract(vinTokenAddress, vinABI, vicProvider);
        const vinBalanceRaw = await vinTokenContract.balanceOf(userAccount);
        balances.VIN = ethers.utils.formatUnits(vinBalanceRaw, 18); // L∆∞u s·ªë d∆∞ VIN

        // Hi·ªÉn th·ªã s·ªë d∆∞ ƒë√∫ng
        updateBalanceDisplay();

        console.log(`‚úÖ S·ªë d∆∞ VIC: ${balances.VIC} VIC`);
        console.log(`‚úÖ S·ªë d∆∞ VIN: ${balances.VIN} VIN`);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·ªë d∆∞ VIC ho·∫∑c VIN:", error);
    }
}

// üìå C·∫≠p nh·∫≠t s·ªë d∆∞ tr√™n giao di·ªán (hi·ªÉn th·ªã 18 s·ªë th·∫≠p ph√¢n)
function updateBalanceDisplay() {
    document.getElementById("from-balance").textContent = `${parseFloat(balances[fromToken]).toFixed(18)}`;
    document.getElementById("to-balance").textContent = `${parseFloat(balances[toToken]).toFixed(18)}`;
}


// üìå X·ª≠ l√Ω ho√°n ƒë·ªïi chi·ªÅu swap
document.getElementById("swap-direction").addEventListener("click", async () => {
    console.log("üîÑ ƒê·∫£o h∆∞·ªõng swap...");

    // Ho√°n ƒë·ªïi token
    [fromToken, toToken] = [toToken, fromToken];

    // C·∫≠p nh·∫≠t giao di·ªán token
    document.getElementById("from-token-symbol").textContent = fromToken;
    document.getElementById("to-token-symbol").textContent = toToken;
    [document.getElementById("from-token-logo").src, document.getElementById("to-token-logo").src] =
    [document.getElementById("to-token-logo").src, document.getElementById("from-token-logo").src];

    // C·∫≠p nh·∫≠t l·∫°i s·ªë d∆∞ hi·ªÉn th·ªã
    updateBalanceDisplay();
});

// üìå G√°n s·ª± ki·ªán cho n√∫t k·∫øt n·ªëi v√≠
document.getElementById("connect-wallet").addEventListener("click", connectWallet);

// üìå X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p s·ªë l∆∞·ª£ng ho·∫∑c b·∫•m n√∫t Max
const fromAmountInput = document.getElementById("from-amount");
const toAmountInput = document.getElementById("to-amount");
const maxButton = document.getElementById("max-button");

// ‚úÖ H√†m c·∫≠p nh·∫≠t s·ªë token nh·∫≠n ƒë∆∞·ª£c
function updateSwapOutput() {
    let fromTokenSymbol = document.getElementById("from-token-symbol").textContent.trim(); // Token ƒëang swap
    let inputAmount = parseFloat(fromAmountInput.value) || 0; // S·ªë l∆∞·ª£ng token mu·ªën ƒë·ªïi
    let outputAmount = 0; // S·ªë l∆∞·ª£ng token nh·∫≠n

    // ‚úÖ T√≠nh s·ªë l∆∞·ª£ng token nh·∫≠n theo h·ª£p ƒë·ªìng (1 VIN = 100 VIC, tr·ª´ ph√≠ 0.01 VIC)
    if (fromTokenSymbol === "VIC") {
        let netVic = inputAmount - 0.01; // Tr·ª´ ph√≠ swap
        outputAmount = netVic >= 0.001 ? netVic / 100 : 0; // ƒê·∫£m b·∫£o ch·ªâ hi·ªán n·∫øu >= 0.001 VIN
    } else {
        let vicAmount = inputAmount * 100; // Quy ƒë·ªïi sang VIC
        outputAmount = vicAmount > 0.01 ? vicAmount - 0.01 : 0; // Tr·ª´ ph√≠ swap
    }

    // ‚úÖ Hi·ªÉn th·ªã ƒë√∫ng 18 s·ªë th·∫≠p ph√¢n
    toAmountInput.value = outputAmount > 0 ? outputAmount.toFixed(18) : "0.000000000000000000";
}

// üìå Khi ng∆∞·ªùi d√πng nh·∫≠p s·ªë l∆∞·ª£ng token mu·ªën ƒë·ªïi
fromAmountInput.addEventListener("input", updateSwapOutput);

// üìå Khi b·∫•m n√∫t Max, nh·∫≠p to√†n b·ªô s·ªë d∆∞ token v√†o √¥ nh·∫≠p
maxButton.addEventListener("click", async () => {
    let fromTokenSymbol = document.getElementById("from-token-symbol").textContent.trim(); // Token ƒëang swap
    let maxAmount = parseFloat(document.getElementById("from-balance").textContent.trim()) || 0; // S·ªë d∆∞ hi·ªán t·∫°i

    if (maxAmount > 0) {
        fromAmountInput.value = maxAmount.toFixed(18); // ƒêi·ªÅn s·ªë d∆∞ t·ªëi ƒëa v√†o √¥ nh·∫≠p v·ªõi ƒë·ªô ch√≠nh x√°c 18 s·ªë th·∫≠p ph√¢n
        updateSwapOutput(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng token nh·∫≠n
    }
});
