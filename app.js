// ==============================
// üîπ K·∫æT N·ªêI V√ç & C·∫¨P NH·∫¨T S·ªê D∆Ø VIC & VIN
// ==============================
document.addEventListener("DOMContentLoaded", function () {
    // L·∫•y c√°c ph·∫ßn t·ª≠ quan tr·ªçng t·ª´ giao di·ªán
    const connectWalletBtn = document.getElementById("connect-wallet");
    const disconnectWalletBtn = document.getElementById("disconnect-wallet");
    const swapInterface = document.getElementById("swap-interface");
    const walletAddressEl = document.getElementById("wallet-address");
    const fromBalance = document.getElementById("from-balance");
    const toBalance = document.getElementById("to-balance");

    let provider, signer, walletAddress;
    let vinTokenContract;
    
    // ƒê·ªãa ch·ªâ h·ª£p ƒë·ªìng th√¥ng minh c·ªßa VIN & Swap Contract
    const VIN_CONTRACT_ADDRESS = "0x941F63807401efCE8afe3C9d88d368bAA287Fac4";
    const SWAP_CONTRACT_ADDRESS = "0xFFE8C8E49f065b083ce3F45014b443Cb6c5F6e38";

    // ABI c·ªßa VIN Token (Ch·ªâ l·∫•y ph·∫ßn c·∫ßn thi·∫øt)
    const vinABI = [
        "function balanceOf(address owner) view returns (uint256)",
        "function decimals() view returns (uint8)",
        "function approve(address spender, uint256 amount) external returns (bool)"
    ];

    // üìå K·∫øt n·ªëi v√≠
    async function connectWallet() {
        if (!window.ethereum) {
            alert("‚ùå Please install MetaMask or use a Web3 browser!");
            return;
        }

        try {
            provider = new ethers.providers.Web3Provider(window.ethereum);
            await provider.send("eth_requestAccounts", []);
            signer = provider.getSigner();
            walletAddress = await signer.getAddress();

            console.log("üîó Wallet connected:", walletAddress);

            vinTokenContract = new ethers.Contract(VIN_CONTRACT_ADDRESS, vinABI, provider);
            await updateBalances();

            // Hi·ªÉn th·ªã giao di·ªán Swap, ·∫©n trang ch√≠nh
            document.querySelector(".main-content").style.display = "none";
            swapInterface.classList.remove("hidden");
            swapInterface.style.display = "block";
            walletAddressEl.textContent = walletAddress;
        } catch (error) {
            console.error("‚ùå Wallet connection error:", error);
            alert("‚ùå Unable to connect wallet. Please try again!");
        }
    }

    // üìå X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m "Connect Wallet"
    if (connectWalletBtn) {
        connectWalletBtn.addEventListener("click", connectWallet);
    }

    // üìå X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m "Disconnect Wallet"
    disconnectWalletBtn.addEventListener("click", function () {
        swapInterface.style.display = "none";
        document.querySelector(".main-content").style.display = "flex";
        walletAddressEl.textContent = "Not Connected";
        console.log("üî¥ Wallet disconnected.");
        alert("‚ùå Wallet disconnected!");
    });
});
// ==============================
// üîπ C·∫¨P NH·∫¨T S·ªê D∆Ø VIC & VIN
// ==============================
async function updateBalances() {
    if (!walletAddress || !provider) return;

    try {
        // L·∫•y s·ªë d∆∞ VIC (BNB Native)
        const vicBalance = await provider.getBalance(walletAddress);
        const vinBalance = await vinTokenContract.balanceOf(walletAddress);

        // Chuy·ªÉn ƒë·ªïi s·ªë d∆∞ th√†nh ƒë·ªãnh d·∫°ng ƒë·ªçc ƒë∆∞·ª£c
        fromBalance.textContent = parseFloat(ethers.utils.formatEther(vicBalance)).toFixed(4);
        toBalance.textContent = parseFloat(ethers.utils.formatUnits(vinBalance, 18)).toFixed(4);

        console.log("‚úÖ Balances updated:", {
            VIC: fromBalance.textContent,
            VIN: toBalance.textContent,
        });
    } catch (error) {
        console.error("‚ùå Error updating balances:", error);
    }
}

// üìå T·ª± ƒë·ªông c·∫≠p nh·∫≠t s·ªë d∆∞ m·ªói 30 gi√¢y
setInterval(updateBalances, 30000);

// ==============================
// üîπ X·ª¨ L√ù HO√ÅN ƒê·ªîI CHI·ªÄU SWAP (N√öT M≈®I T√äN)
// ==============================

const swapDirectionButton = document.getElementById("swap-direction");
const fromTokenSymbol = document.getElementById("from-token-symbol");
const toTokenSymbol = document.getElementById("to-token-symbol");
const fromTokenLogo = document.getElementById("from-token-logo");
const toTokenLogo = document.getElementById("to-token-logo");

let fromToken = "VIC";
let toToken = "VIN";

// üìå X·ª≠ l√Ω khi b·∫•m n√∫t ƒë·∫£o chi·ªÅu swap
swapDirectionButton.addEventListener("click", async () => {
    console.log("üîÑ ƒê·∫£o h∆∞·ªõng swap...");

    // ƒê·∫£o v·ªã tr√≠ token
    [fromToken, toToken] = [toToken, fromToken];

    // C·∫≠p nh·∫≠t giao di·ªán
    fromTokenSymbol.textContent = fromToken;
    toTokenSymbol.textContent = toToken;

    // ƒê·∫£o v·ªã tr√≠ logo token
    [fromTokenLogo.src, toTokenLogo.src] = [toTokenLogo.src, fromTokenLogo.src];

    // C·∫≠p nh·∫≠t s·ªë d∆∞ m·ªõi sau khi ƒë·ªïi chi·ªÅu swap
    await updateBalances();
});

// üöÄ T·ª± ƒë·ªông k·∫øt n·ªëi n·∫øu tr∆∞·ªõc ƒë√≥ ƒë√£ k·∫øt n·ªëi
document.addEventListener("DOMContentLoaded", async () => {
    if (window.ethereum && (await window.ethereum.request({ method: "eth_accounts" })).length > 0) {
        await connectWallet();
    }
});

// ==============================
// üîπ X·ª¨ L√ù KHI NG∆Ø·ªúI D√ôNG NH·∫¨P S·ªê L∆Ø·ª¢NG HO·∫∂C B·∫§M N√öT MAX
// ==============================

// L·∫•y c√°c ph·∫ßn t·ª≠ nh·∫≠p s·ªë l∆∞·ª£ng token
const fromAmountInput = document.getElementById("from-amount");
const toAmountInput = document.getElementById("to-amount");
const maxButton = document.getElementById("max-button");

// ‚úÖ H√†m c·∫≠p nh·∫≠t s·ªë token nh·∫≠n ƒë∆∞·ª£c d·ª±a v√†o t·ª∑ l·ªá swap
function updateSwapOutput() {
    let fromTokenSymbol = document.getElementById("from-token-symbol").textContent.trim(); // Token ngu·ªìn
    let inputAmount = parseFloat(fromAmountInput.value) || 0; // S·ªë l∆∞·ª£ng token ƒë·∫ßu v√†o
    let outputAmount = 0; // S·ªë l∆∞·ª£ng token nh·∫≠n ƒë∆∞·ª£c

    // ‚úÖ T√≠nh s·ªë l∆∞·ª£ng token nh·∫≠n theo h·ª£p ƒë·ªìng (1 VIN = 100 VIC, tr·ª´ ph√≠ 0.01 VIC)
    if (fromTokenSymbol === "VIC") {
        let netVic = inputAmount - 0.01; // Tr·ª´ ph√≠ swap
        outputAmount = netVic >= 0.001 ? netVic / 100 : 0; // ƒê·∫£m b·∫£o kh√¥ng t√≠nh n·∫øu < 0.001 VIN
    } else {
        let vicAmount = inputAmount * 100; // Quy ƒë·ªïi sang VIC
        outputAmount = vicAmount > 0.01 ? vicAmount - 0.01 : 0; // Tr·ª´ ph√≠ swap
    }

    // ‚úÖ Hi·ªÉn th·ªã t·ªëi ƒëa 4 ch·ªØ s·ªë th·∫≠p ph√¢n ƒë·ªÉ tr√°nh sai s·ªë
    toAmountInput.value = outputAmount > 0 ? outputAmount.toFixed(4) : "0.0000";
}

// üìå Khi ng∆∞·ªùi d√πng nh·∫≠p s·ªë l∆∞·ª£ng token mu·ªën swap
fromAmountInput.addEventListener("input", updateSwapOutput);

// üìå Khi b·∫•m n√∫t Max, nh·∫≠p to√†n b·ªô s·ªë d∆∞ token v√†o √¥ nh·∫≠p
maxButton.addEventListener("click", async () => {
    let fromTokenSymbol = document.getElementById("from-token-symbol").textContent.trim(); // Token ngu·ªìn
    let maxAmount = parseFloat(document.getElementById("from-balance").textContent.trim()) || 0; // S·ªë d∆∞ hi·ªán t·∫°i

    if (maxAmount > 0) {
        fromAmountInput.value = maxAmount.toFixed(4); // ƒêi·ªÅn s·ªë d∆∞ t·ªëi ƒëa v·ªõi ƒë·ªô ch√≠nh x√°c 4 ch·ªØ s·ªë th·∫≠p ph√¢n
        updateSwapOutput(); // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng token nh·∫≠n
    }
});

// ==============================
// üîπ X·ª¨ L√ù GIAO D·ªäCH SWAP KHI NH·∫§N "SWAP NOW"
// ==============================

document.addEventListener("DOMContentLoaded", function () {
    const swapNowButton = document.getElementById("swap-now");

    if (!swapNowButton) {
        console.error("‚ùå Swap Now button not found.");
        return;
    }

    // üìå S·ª± ki·ªán khi nh·∫•n n√∫t Swap
    swapNowButton.addEventListener("click", async function () {
        try {
            await connectWallet();

            let fromAmount = parseFloat(fromAmountInput.value);
            if (isNaN(fromAmount) || fromAmount <= 0) {
                alert("‚ùå Please enter a valid amount.");
                return;
            }

            console.log(`üîÑ Swapping: ${fromAmount} ${fromTokenSymbol.textContent.trim()}`);

            // ‚úÖ K·∫øt n·ªëi h·ª£p ƒë·ªìng Swap VIN/VIC
            const VINSWAP_CONTRACT_ADDRESS = "0xFFE8C8E49f065b083ce3F45014b443Cb6c5F6e38";
            const vinSwapABI = [
                "function swapBNBForVIN() payable",
                "function swapVINForBNB(uint256 vinAmount) external"
            ];
            const vinSwapContract = new ethers.Contract(VINSWAP_CONTRACT_ADDRESS, vinSwapABI, signer);

            let tx;
            if (fromTokenSymbol.textContent.trim() === "VIC") {
                if (fromAmount < 0.011) {
                    alert("‚ùå Minimum swap amount for VIC is 0.011 VIC.");
                    return;
                }
                // ‚úÖ Swap VIC ‚Üí VIN (tr·ª´ ph√≠ 0.01 VIC)
                tx = await vinSwapContract.swapBNBForVIN({
                    value: ethers.utils.parseEther(fromAmount.toString())
                });
            } else {
                if (fromAmount < 0.00011) {
                    alert("‚ùå Minimum swap amount for VIN is 0.00011 VIN.");
                    return;
                }
                // ‚úÖ Swap VIN ‚Üí VIC (ph·∫£i c·∫•p quy·ªÅn tr∆∞·ªõc)
                const VIN_CONTRACT_ADDRESS = "0x941F63807401efCE8afe3C9d88d368bAA287Fac4";
                const vinABI = [
                    "function approve(address spender, uint256 amount) external returns (bool)"
                ];
                const vinTokenContract = new ethers.Contract(VIN_CONTRACT_ADDRESS, vinABI, signer);

                // ‚úÖ C·∫•p quy·ªÅn swap tr∆∞·ªõc khi giao d·ªãch
                const vinAmount = ethers.utils.parseUnits(fromAmount.toString(), 18);
                console.log("üîÑ Approving VIN for swap...");
                const approveTx = await vinTokenContract.approve(VINSWAP_CONTRACT_ADDRESS, vinAmount);
                await approveTx.wait();
                console.log("‚úÖ Approval successful!");

                // ‚úÖ Swap VIN ‚Üí VIC
                tx = await vinSwapContract.swapVINForBNB(vinAmount);
            }

            await tx.wait();
            console.log("‚úÖ Swap completed:", tx.hash);

            // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng & c·∫≠p nh·∫≠t s·ªë d∆∞
            alert("‚úÖ Swap successful!");
            await updateBalances();
            console.log("‚úÖ Balance updated successfully!");

        } catch (error) {
            console.error("‚ùå Swap failed:", error);
            alert("‚ùå Swap failed! Please try again.");
        }
    });

    // üìå N√∫t Max - Swap to√†n b·ªô s·ªë d∆∞
    maxButton.addEventListener("click", async function () {
        await connectWallet();

        const fromToken = fromTokenSymbol.textContent.trim();
        let maxAmount;
        if (fromToken === "VIC") {
            maxAmount = await provider.getBalance(walletAddress);
            maxAmount = ethers.utils.formatEther(maxAmount);
        } else {
            const vinTokenContract = new ethers.Contract(
                "0x941F63807401efCE8afe3C9d88d368bAA287Fac4",
                ["function balanceOf(address owner) view returns (uint256)"],
                signer
            );
            maxAmount = await vinTokenContract.balanceOf(walletAddress);
            maxAmount = ethers.utils.formatUnits(maxAmount, 18);
        }

        fromAmountInput.value = parseFloat(maxAmount).toFixed(18); // Hi·ªÉn th·ªã ch√≠nh x√°c s·ªë d∆∞
        updateSwapOutput();
    });

    // üìå T·ª± ƒë·ªông c·∫≠p nh·∫≠t k·∫øt qu·∫£ Swap khi nh·∫≠p s·ªë l∆∞·ª£ng
    fromAmountInput.addEventListener("input", updateSwapOutput);
});
