// üìå Import th∆∞ vi·ªán ethers
document.addEventListener('DOMContentLoaded', async () => {
    // üåç C√°c ph·∫ßn t·ª≠ DOM
    const connectWalletButton = document.getElementById('connect-wallet');
    const walletAddressDisplay = document.getElementById('wallet-address');
    const fromTokenInfo = document.getElementById('from-token-info');
    const toTokenInfo = document.getElementById('to-token-info');

    // üîó C·∫•u h√¨nh Blockchain
    let provider, signer;
    const RPC_URL = "https://rpc.viction.xyz"; // RPC m·∫°ng Viction
    const vinSwapAddress = "0xFFE8C8E49f065b083ce3F45014b443Cb6c5F6e38"; // H·ª£p ƒë·ªìng Swap
    const vinTokenAddress = "0x941F63807401efCE8afe3C9d88d368bAA287Fac4"; // Token VIN
    let walletAddress = null;

    // üîó ABI c·ªßa token VIN (ERC-20)
    const vinTokenABI = [
        {
            "constant": true,
            "inputs": [{ "name": "owner", "type": "address" }],
            "name": "balanceOf",
            "outputs": [{ "name": "balance", "type": "uint256" }],
            "type": "function"
        }
    ];

    // ü¶ä K·∫øt n·ªëi v√≠ MetaMask b·∫±ng ethers.js
    async function connectWallet() {
        try {
            if (!window.ethereum) {
                alert("MetaMask is not installed!");
                return;
            }
            provider = new ethers.providers.Web3Provider(window.ethereum);
            await provider.send("eth_requestAccounts", []);
            signer = provider.getSigner();
            walletAddress = await signer.getAddress();

            // K·∫øt n·ªëi h·ª£p ƒë·ªìng VIN Token
            vinTokenContract = new ethers.Contract(vinTokenAddress, vinTokenABI, provider);

            // üìù Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ v√≠
            walletAddressDisplay.textContent = `Wallet: ${walletAddress}`;
            alert(`Connected: ${walletAddress}`);

            // ‚úÖ Ki·ªÉm tra s·ªë d∆∞ VIC & VIN
            checkBalances();
        } catch (error) {
            alert("Failed to connect wallet!");
            console.error(error);
        }
    }

    // üè¶ H√†m ki·ªÉm tra s·ªë d∆∞ VIC & VIN
    async function checkBalances() {
        try {
            if (!walletAddress) return;

            // üè¶ L·∫•y s·ªë d∆∞ VIC ƒë√∫ng nh∆∞ ƒë√£ test tr√™n m√°y ch·ªß
            const balanceVic = await provider.getBalance(walletAddress);
            const formattedVic = ethers.utils.formatEther(balanceVic);

            // üè¶ L·∫•y s·ªë d∆∞ VIN theo chu·∫©n ERC-20
            const balanceVin = await vinTokenContract.balanceOf(walletAddress);
            const formattedVin = ethers.utils.formatUnits(balanceVin, 18);

            // üìù Hi·ªÉn th·ªã s·ªë d∆∞ tr√™n giao di·ªán
            fromTokenInfo.textContent = `VIC: ${formattedVic}`;
            toTokenInfo.textContent = `VIN: ${formattedVin}`;
            alert(`‚úÖ VIC Balance: ${formattedVic} VIC\n‚úÖ VIN Balance: ${formattedVin} VIN`);
        } catch (error) {
            console.error("Error checking balances:", error);
        }
    }

    // üéØ K·∫øt n·ªëi v√≠ khi nh·∫•n n√∫t
    connectWalletButton.addEventListener("click", connectWallet);
});
