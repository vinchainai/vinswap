// üìå API Binance l·∫•y gi√° VIC theo USD
const BINANCE_API_URL = "https://api.binance.com/api/v3/ticker/price?symbol=VICUSDT";

// üè∑Ô∏è Ch·ªçn ph·∫ßn t·ª≠ HTML ƒë·ªÉ hi·ªÉn th·ªã gi√° VIN
const vinPriceElement = document.getElementById("vin-price");

// üîÑ H√†m c·∫≠p nh·∫≠t gi√° VIN theo USD
async function updateVinPrice() {
    try {
        // üîç G·ªçi API l·∫•y gi√° VIC
        const response = await fetch(BINANCE_API_URL);
        const data = await response.json();

        if (!data || !data.price) {
            throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° VIC t·ª´ Binance API");
        }

        const vicPrice = parseFloat(data.price); // Gi√° VIC theo USD
        const vinPrice = (vicPrice * 100).toFixed(2); // 1 VIN = 100 VIC

        // üî• Hi·ªÉn th·ªã gi√° VIN tr√™n thanh ƒëi·ªÅu h∆∞·ªõng
        vinPriceElement.textContent = `1 VIN = ${vinPrice} USD`;
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° VIN:", error);
        vinPriceElement.textContent = "Price unavailable";
    }
}

// üöÄ G·ªçi h√†m c·∫≠p nh·∫≠t gi√° ngay khi trang t·∫£i
updateVinPrice();

// üîÑ C·∫≠p nh·∫≠t gi√° m·ªói 30 gi√¢y
setInterval(updateVinPrice, 30000);

// S·ª± ki·ªán ch·∫°y khi trang ƒë√£ t·∫£i ho√†n t·∫•t
document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const connectWalletButton = document.getElementById('connect-wallet');
    const disconnectWalletButton = document.getElementById('disconnect-wallet');
    const walletAddressDisplay = document.getElementById('wallet-address');
    const fromAmountInput = document.getElementById('from-amount');
    const toAmountInput = document.getElementById('to-amount');
    const fromTokenInfo = document.getElementById('from-token-info');
    const toTokenInfo = document.getElementById('to-token-info');
    const fromTokenLogo = document.getElementById('from-token-logo');
    const toTokenLogo = document.getElementById('to-token-logo');
    const swapDirectionButton = document.getElementById('swap-direction');
    const maxButton = document.getElementById('max-button');
    const swapNowButton = document.getElementById('swap-now');
    const transactionFeeDisplay = document.getElementById('transaction-fee');
    const gasFeeDisplay = document.getElementById('gas-fee');

    // Blockchain Config
    let provider, signer;
    let walletConnectProvider = null;
    // üìå ƒê·ªãa ch·ªâ h·ª£p ƒë·ªìng th√¥ng minh VIN Swap & VIN Token
    const vinSwapAddress = "0xFFE8C8E49f065b083ce3F45014b443Cb6c5F6e38";
    const vinTokenAddress = "0x941F63807401efCE8afe3C9d88d368bAA287Fac4";

    // üè¶ Bi·∫øn l∆∞u s·ªë d∆∞
    let walletAddress = null;
    let balances = { VIC: 0, VIN: 0 };

    // üìå ABI c·ªßa VIN Swap & VIN Token ƒë·ªÉ l·∫•y s·ªë d∆∞
    const vinSwapABI = [
        { "inputs": [], "name": "swapVicToVin", "outputs": [], "stateMutability": "payable", "type": "function" },
        { "inputs": [{ "internalType": "uint256", "name": "vinAmount", "type": "uint256" }], "name": "swapVinToVic", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
    ];

    const vinABI = [
        { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }
    ];

    // üåç K·∫øt n·ªëi h·ª£p ƒë·ªìng
    let vinSwapContract = new ethers.Contract(vinSwapAddress, vinSwapABI, provider);
    let vinTokenContract = new ethers.Contract(vinTokenAddress, vinABI, provider);

    // üîÑ K·∫øt n·ªëi v√≠
    async function connectWallet() {
        try {
            // ü¶ä Y√™u c·∫ßu quy·ªÅn k·∫øt n·ªëi t·ª´ MetaMask
            await window.ethereum.request({ method: "eth_requestAccounts" });

            // üîå K·∫øt n·ªëi signer
            signer = provider.getSigner();
            walletAddress = await signer.getAddress();

            // üéâ Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ v√≠ l√™n giao di·ªán
            walletAddressDisplay.textContent = `Connected: ${walletAddress}`;

            // üîÑ C·∫≠p nh·∫≠t s·ªë d∆∞
            await updateBalances();

            // üé≠ Hi·ªÉn th·ªã giao di·ªán Swap, ·∫©n giao di·ªán Connect
            document.getElementById('swap-interface').style.display = 'block';
            document.getElementById('connect-interface').style.display = 'none';

        } catch (error) {
            console.error("‚ùå K·∫øt n·ªëi v√≠ th·∫•t b·∫°i:", error);
            alert("‚ö†Ô∏è Failed to connect wallet. Please try again!");
        }
    }

    // üîÑ L·∫•y s·ªë d∆∞ VIC & VIN
    async function updateBalances() {
        try {
            // üè¶ L·∫•y s·ªë d∆∞ VIC (Native Coin)
            balances.VIC = parseFloat(ethers.utils.formatEther(await provider.getBalance(walletAddress)));

            // üè¶ L·∫•y s·ªë d∆∞ VIN (Token ERC-20)
            const vinBalanceRaw = await vinTokenContract.balanceOf(walletAddress);
            balances.VIN = parseFloat(ethers.utils.formatUnits(vinBalanceRaw, 18));

            // üìå Hi·ªÉn th·ªã s·ªë d∆∞ l√™n giao di·ªán
            fromTokenInfo.textContent = `VIC: ${balances.VIC.toFixed(4)}`;
            toTokenInfo.textContent = `VIN: ${balances.VIN.toFixed(4)}`;
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y s·ªë d∆∞:", error);
            alert("‚ö†Ô∏è Failed to fetch balances. Please try again!");
        }
    }

    // üñ±Ô∏è Khi b·∫•m "Connect Wallet"
    connectWalletButton.addEventListener("click", connectWallet);
