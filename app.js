// Ki·ªÉm tra n·∫øu tr√¨nh duy·ªát h·ªó tr·ª£ MetaMask
if (typeof window.ethereum === "undefined") {
    alert("Vui l√≤ng c√†i ƒë·∫∑t MetaMask ƒë·ªÉ s·ª≠ d·ª•ng VinSwap!");
}

// Bi·∫øn to√†n c·ª•c
let provider, signer, userAccount;
let vinTokenAddress = "0x941F63807401efCE8afe3C9d88d368bAA287Fac4"; // ƒê·ªãa ch·ªâ token VIN
let vinSwapAddress = "0xFFE8C8E49f065b083ce3F45014b443Cb6c5F6e38"; // ƒê·ªãa ch·ªâ h·ª£p ƒë·ªìng Swap
let rpcUrl = "https://rpc.viction.xyz"; // RPC m·∫°ng Viction

// Kh·ªüi t·∫°o k·∫øt n·ªëi v√≠ MetaMask
async function connectWallet() {
    try {
        if (!window.ethereum) {
            alert("Vui l√≤ng c√†i ƒë·∫∑t MetaMask!");
            return;
        }

        provider = new ethers.providers.Web3Provider(window.ethereum);
        await provider.send("eth_requestAccounts", []);
        signer = provider.getSigner();
        userAccount = await signer.getAddress();

        console.log("‚úÖ ƒê√£ k·∫øt n·ªëi v√≠:", userAccount);
        document.getElementById("wallet-address").innerText = userAccount;

        // ·∫®n c√°c giao di·ªán kh√¥ng c·∫ßn thi·∫øt
        document.querySelector(".main-content").style.display = "none";
        document.querySelector(".navbar").style.display = "none";
        document.querySelector(".footer").style.display = "none";

        // Hi·ªÉn th·ªã giao di·ªán Swap
        document.getElementById("swap-interface").style.display = "block";

        // G·ªçi h√†m hi·ªÉn th·ªã s·ªë d∆∞ sau khi k·∫øt n·ªëi
        await getBalances();
    } catch (error) {
        console.error("‚ùå L·ªói k·∫øt n·ªëi v√≠:", error);
        alert("K·∫øt n·ªëi v√≠ th·∫•t b·∫°i!");
    }
}

// üè¶ H√†m l·∫•y s·ªë d∆∞ VIC & VIN ch√≠nh x√°c
async function getBalances() {
    try {
        if (!userAccount) {
            console.error("V√≠ ch∆∞a ƒë∆∞·ª£c k·∫øt n·ªëi!");
            return;
        }

        console.log("üîç Ki·ªÉm tra s·ªë d∆∞ c·ªßa v√≠:", userAccount);

        // üè¶ L·∫•y s·ªë d∆∞ VIC (Native Coin - Viction)
        const vicBalanceRaw = await provider.getBalance(userAccount);
        const vicBalance = ethers.utils.formatEther(vicBalanceRaw);
        document.getElementById("from-balance").innerText = `${vicBalance} VIC`;

        // üè¶ L·∫•y s·ªë d∆∞ VIN (Token ERC-20) - S·ª¨ D·ª§NG JSON-RPC TR·ª∞C TI·∫æP
        const vinABI = [
            {
                "constant": true,
                "inputs": [{ "name": "owner", "type": "address" }],
                "name": "balanceOf",
                "outputs": [{ "name": "balance", "type": "uint256" }],
                "stateMutability": "view",
                "type": "function"
            }
        ];
        
        const vinProvider = new ethers.providers.JsonRpcProvider(rpcUrl);
        const vinTokenContract = new ethers.Contract(vinTokenAddress, vinABI, vinProvider);
        
        const vinBalanceRaw = await vinTokenContract.balanceOf(userAccount);
        const vinBalance = ethers.utils.formatUnits(vinBalanceRaw, 18);
        document.getElementById("to-balance").innerText = `${vinBalance} VIN`;

        console.log(`‚úÖ S·ªë d∆∞ VIC: ${vicBalance} VIC`);
        console.log(`‚úÖ S·ªë d∆∞ VIN: ${vinBalance} VIN`);
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y s·ªë d∆∞ VIN:", error);
    }
}

// G√°n s·ª± ki·ªán cho n√∫t k·∫øt n·ªëi
document.getElementById("connect-wallet").addEventListener("click", connectWallet);
