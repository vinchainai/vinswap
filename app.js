// üéØ K·∫øt n·ªëi v√≠ MetaMask v√† l·∫•y s·ªë d∆∞ VIC + VIN
document.addEventListener("DOMContentLoaded", async () => {
    const connectButton = document.getElementById("connect-wallet");
    const disconnectButton = document.getElementById("disconnect-wallet");
    const homeInterface = document.getElementById("connect-interface");
    const swapInterface = document.getElementById("swap-interface");
    const walletAddressDisplay = document.getElementById("wallet-address");
    const fromTokenInfo = document.getElementById("from-token-info");
    const toTokenInfo = document.getElementById("to-token-info");

    let provider, signer, userAddress;

    // ‚úÖ Ki·ªÉm tra n·∫øu MetaMask ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t
    if (typeof window.ethereum === "undefined") {
        alert("MetaMask ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t! Vui l√≤ng c√†i ƒë·∫∑t MetaMask ƒë·ªÉ s·ª≠ d·ª•ng VinSwap.");
        return;
    }

    // üåê Kh·ªüi t·∫°o provider t·ª´ MetaMask
    provider = new ethers.providers.Web3Provider(window.ethereum);

    // üìå K·∫øt n·ªëi v√≠ MetaMask
    connectButton.addEventListener("click", async () => {
        try {
            const accounts = await provider.send("eth_requestAccounts", []);
            userAddress = accounts[0];

            signer = provider.getSigner();
            walletAddressDisplay.textContent = `üü¢ ${userAddress}`;

            // ·∫®n giao di·ªán Home, hi·ªÉn th·ªã giao di·ªán Swap
            homeInterface.style.display = "none";
            swapInterface.style.display = "block";

            // G·ªçi h√†m l·∫•y s·ªë d∆∞ VIC & VIN
            await getBalances();
        } catch (error) {
            console.error("‚ùå L·ªói khi k·∫øt n·ªëi MetaMask:", error);
            alert("Kh√¥ng th·ªÉ k·∫øt n·ªëi MetaMask. Vui l√≤ng th·ª≠ l·∫°i!");
        }
    });

    // üîå Ng·∫Øt k·∫øt n·ªëi v√† quay l·∫°i m√†n h√¨nh Home
    disconnectButton.addEventListener("click", () => {
        swapInterface.style.display = "none";
        homeInterface.style.display = "block";
    });

    // üîÑ H√†m l·∫•y s·ªë d∆∞ VIC & VIN
    async function getBalances() {
        try {
            // üè¶ L·∫•y s·ªë d∆∞ VIC
            const vicBalanceRaw = await provider.getBalance(userAddress);
            const vicBalance = ethers.utils.formatEther(vicBalanceRaw);
            fromTokenInfo.textContent = `VIC: ${parseFloat(vicBalance).toFixed(4)}`;

            // üè¶ L·∫•y s·ªë d∆∞ VIN (ERC-20)
            const vinTokenAddress = "0x941F63807401efCE8afe3C9d88d368bAA287Fac4";
            const vinABI = [
                {
                    "constant": true,
                    "inputs": [{ "name": "owner", "type": "address" }],
                    "name": "balanceOf",
                    "outputs": [{ "name": "balance", "type": "uint256" }],
                    "type": "function"
                }
            ];
            const vinContract = new ethers.Contract(vinTokenAddress, vinABI, provider);
            const vinBalanceRaw = await vinContract.balanceOf(userAddress);
            const vinBalance = ethers.utils.formatUnits(vinBalanceRaw, 18);
            toTokenInfo.textContent = `VIN: ${parseFloat(vinBalance).toFixed(4)}`;
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y s·ªë d∆∞:", error);
        }
    }
});
